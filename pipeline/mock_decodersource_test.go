// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/mozilla-services/heka/pipeline (interfaces: DecoderSource)

package pipeline

import (
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of DecoderSource interface
type MockDecoderSource struct {
	ctrl     *gomock.Controller
	recorder *_MockDecoderSourceRecorder
}

// Recorder for MockDecoderSource (not exported)
type _MockDecoderSourceRecorder struct {
	mock *MockDecoderSource
}

func NewMockDecoderSource(ctrl *gomock.Controller) *MockDecoderSource {
	mock := &MockDecoderSource{ctrl: ctrl}
	mock.recorder = &_MockDecoderSourceRecorder{mock}
	return mock
}

func (_m *MockDecoderSource) EXPECT() *_MockDecoderSourceRecorder {
	return _m.recorder
}

func (_m *MockDecoderSource) NewDecoder(_param0 string) (DecoderRunner, bool) {
	ret := _m.ctrl.Call(_m, "NewDecoder", _param0)
	ret0, _ := ret[0].(DecoderRunner)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockDecoderSourceRecorder) NewDecoder(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewDecoder", arg0)
}

func (_m *MockDecoderSource) NewDecoders() map[string]DecoderRunner {
	ret := _m.ctrl.Call(_m, "NewDecoders")
	ret0, _ := ret[0].(map[string]DecoderRunner)
	return ret0
}

func (_mr *_MockDecoderSourceRecorder) NewDecoders() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewDecoders")
}

func (_m *MockDecoderSource) NewDecodersByEncoding() []DecoderRunner {
	ret := _m.ctrl.Call(_m, "NewDecodersByEncoding")
	ret0, _ := ret[0].([]DecoderRunner)
	return ret0
}

func (_mr *_MockDecoderSourceRecorder) NewDecodersByEncoding() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewDecodersByEncoding")
}

func (_m *MockDecoderSource) RunningDecoders() map[string]DecoderRunner {
	ret := _m.ctrl.Call(_m, "RunningDecoders")
	ret0, _ := ret[0].(map[string]DecoderRunner)
	return ret0
}

func (_mr *_MockDecoderSourceRecorder) RunningDecoders() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RunningDecoders")
}

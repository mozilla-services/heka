// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/mozilla-services/heka/pipeline (interfaces: Input)

package pipeline

import (
	gomock "code.google.com/p/gomock/gomock"
	sync "sync"
)

// Mock of Input interface
type MockInput struct {
	ctrl     *gomock.Controller
	recorder *_MockInputRecorder
}

// Recorder for MockInput (not exported)
type _MockInputRecorder struct {
	mock *MockInput
}

func NewMockInput(ctrl *gomock.Controller) *MockInput {
	mock := &MockInput{ctrl: ctrl}
	mock.recorder = &_MockInputRecorder{mock}
	return mock
}

func (_m *MockInput) EXPECT() *_MockInputRecorder {
	return _m.recorder
}

func (_m *MockInput) Start(_param0 InputRunner, _param1 PluginHelper, _param2 *sync.WaitGroup) error {
	ret := _m.ctrl.Call(_m, "Start", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInputRecorder) Start(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0, arg1, arg2)
}

func (_m *MockInput) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

func (_mr *_MockInputRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

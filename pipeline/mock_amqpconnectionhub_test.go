// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/mozilla-services/heka/pipeline (interfaces: AMQPConnectionHub)

package pipeline

import (
	sync "sync"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of AMQPConnectionHub interface
type MockAMQPConnectionHub struct {
	ctrl     *gomock.Controller
	recorder *_MockAMQPConnectionHubRecorder
}

// Recorder for MockAMQPConnectionHub (not exported)
type _MockAMQPConnectionHubRecorder struct {
	mock *MockAMQPConnectionHub
}

func NewMockAMQPConnectionHub(ctrl *gomock.Controller) *MockAMQPConnectionHub {
	mock := &MockAMQPConnectionHub{ctrl: ctrl}
	mock.recorder = &_MockAMQPConnectionHubRecorder{mock}
	return mock
}

func (_m *MockAMQPConnectionHub) EXPECT() *_MockAMQPConnectionHubRecorder {
	return _m.recorder
}

func (_m *MockAMQPConnectionHub) Close(_param0 string, _param1 *sync.WaitGroup) {
	_m.ctrl.Call(_m, "Close", _param0, _param1)
}

func (_mr *_MockAMQPConnectionHubRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close", arg0, arg1)
}

func (_m *MockAMQPConnectionHub) GetChannel(_param0 string) (AMQPChannel, *sync.WaitGroup, *sync.WaitGroup, error) {
	ret := _m.ctrl.Call(_m, "GetChannel", _param0)
	ret0, _ := ret[0].(AMQPChannel)
	ret1, _ := ret[1].(*sync.WaitGroup)
	ret2, _ := ret[2].(*sync.WaitGroup)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockAMQPConnectionHubRecorder) GetChannel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetChannel", arg0)
}

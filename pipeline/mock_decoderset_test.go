// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/mozilla-services/heka/pipeline (interfaces: DecoderSet)

package pipeline

import (
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of DecoderSet interface
type MockDecoderSet struct {
	ctrl     *gomock.Controller
	recorder *_MockDecoderSetRecorder
}

// Recorder for MockDecoderSet (not exported)
type _MockDecoderSetRecorder struct {
	mock *MockDecoderSet
}

func NewMockDecoderSet(ctrl *gomock.Controller) *MockDecoderSet {
	mock := &MockDecoderSet{ctrl: ctrl}
	mock.recorder = &_MockDecoderSetRecorder{mock}
	return mock
}

func (_m *MockDecoderSet) EXPECT() *_MockDecoderSetRecorder {
	return _m.recorder
}

func (_m *MockDecoderSet) ByEncodings() ([]DecoderRunner, error) {
	ret := _m.ctrl.Call(_m, "ByEncodings")
	ret0, _ := ret[0].([]DecoderRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDecoderSetRecorder) ByEncodings() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ByEncodings")
}

func (_m *MockDecoderSet) ByName(_param0 string) (DecoderRunner, bool) {
	ret := _m.ctrl.Call(_m, "ByName", _param0)
	ret0, _ := ret[0].(DecoderRunner)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockDecoderSetRecorder) ByName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ByName", arg0)
}

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/mozilla-services/heka/pipeline (interfaces: AMQPChannel)

package pipeline

import (
	gomock "code.google.com/p/gomock/gomock"
	amqp "github.com/streadway/amqp"
)

// Mock of AMQPChannel interface
type MockAMQPChannel struct {
	ctrl     *gomock.Controller
	recorder *_MockAMQPChannelRecorder
}

// Recorder for MockAMQPChannel (not exported)
type _MockAMQPChannelRecorder struct {
	mock *MockAMQPChannel
}

func NewMockAMQPChannel(ctrl *gomock.Controller) *MockAMQPChannel {
	mock := &MockAMQPChannel{ctrl: ctrl}
	mock.recorder = &_MockAMQPChannelRecorder{mock}
	return mock
}

func (_m *MockAMQPChannel) EXPECT() *_MockAMQPChannelRecorder {
	return _m.recorder
}

func (_m *MockAMQPChannel) Cancel(_param0 string, _param1 bool) error {
	ret := _m.ctrl.Call(_m, "Cancel", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel", arg0, arg1)
}

func (_m *MockAMQPChannel) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockAMQPChannel) Confirm(_param0 bool) error {
	ret := _m.ctrl.Call(_m, "Confirm", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Confirm(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Confirm", arg0)
}

func (_m *MockAMQPChannel) Consume(_param0 string, _param1 string, _param2 bool, _param3 bool, _param4 bool, _param5 bool, _param6 amqp.Table) (<-chan amqp.Delivery, error) {
	ret := _m.ctrl.Call(_m, "Consume", _param0, _param1, _param2, _param3, _param4, _param5, _param6)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) Consume(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Consume", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockAMQPChannel) ExchangeBind(_param0 string, _param1 string, _param2 string, _param3 bool, _param4 amqp.Table) error {
	ret := _m.ctrl.Call(_m, "ExchangeBind", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeBind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeBind", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockAMQPChannel) ExchangeDeclare(_param0 string, _param1 string, _param2 bool, _param3 bool, _param4 bool, _param5 bool, _param6 amqp.Table) error {
	ret := _m.ctrl.Call(_m, "ExchangeDeclare", _param0, _param1, _param2, _param3, _param4, _param5, _param6)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeDeclare(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeDeclare", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockAMQPChannel) ExchangeDelete(_param0 string, _param1 bool, _param2 bool) error {
	ret := _m.ctrl.Call(_m, "ExchangeDelete", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeDelete", arg0, arg1, arg2)
}

func (_m *MockAMQPChannel) ExchangeUnbind(_param0 string, _param1 string, _param2 string, _param3 bool, _param4 amqp.Table) error {
	ret := _m.ctrl.Call(_m, "ExchangeUnbind", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeUnbind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeUnbind", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockAMQPChannel) Flow(_param0 bool) error {
	ret := _m.ctrl.Call(_m, "Flow", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Flow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Flow", arg0)
}

func (_m *MockAMQPChannel) Get(_param0 string, _param1 bool) (amqp.Delivery, bool, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1)
	ret0, _ := ret[0].(amqp.Delivery)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockAMQPChannelRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockAMQPChannel) NotifyClose(_param0 chan *amqp.Error) chan *amqp.Error {
	ret := _m.ctrl.Call(_m, "NotifyClose", _param0)
	ret0, _ := ret[0].(chan *amqp.Error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) NotifyClose(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyClose", arg0)
}

func (_m *MockAMQPChannel) NotifyConfirm(_param0 chan uint64, _param1 chan uint64) (chan uint64, chan uint64) {
	ret := _m.ctrl.Call(_m, "NotifyConfirm", _param0, _param1)
	ret0, _ := ret[0].(chan uint64)
	ret1, _ := ret[1].(chan uint64)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) NotifyConfirm(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyConfirm", arg0, arg1)
}

func (_m *MockAMQPChannel) NotifyFlow(_param0 chan bool) chan bool {
	ret := _m.ctrl.Call(_m, "NotifyFlow", _param0)
	ret0, _ := ret[0].(chan bool)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) NotifyFlow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyFlow", arg0)
}

func (_m *MockAMQPChannel) NotifyReturn(_param0 chan amqp.Return) chan amqp.Return {
	ret := _m.ctrl.Call(_m, "NotifyReturn", _param0)
	ret0, _ := ret[0].(chan amqp.Return)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) NotifyReturn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyReturn", arg0)
}

func (_m *MockAMQPChannel) Publish(_param0 string, _param1 string, _param2 bool, _param3 bool, _param4 amqp.Publishing) error {
	ret := _m.ctrl.Call(_m, "Publish", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Publish(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockAMQPChannel) Qos(_param0 int, _param1 int, _param2 bool) error {
	ret := _m.ctrl.Call(_m, "Qos", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Qos(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Qos", arg0, arg1, arg2)
}

func (_m *MockAMQPChannel) QueueBind(_param0 string, _param1 string, _param2 string, _param3 bool, _param4 amqp.Table) error {
	ret := _m.ctrl.Call(_m, "QueueBind", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) QueueBind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueBind", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockAMQPChannel) QueueDeclare(_param0 string, _param1 bool, _param2 bool, _param3 bool, _param4 bool, _param5 amqp.Table) (amqp.Queue, error) {
	ret := _m.ctrl.Call(_m, "QueueDeclare", _param0, _param1, _param2, _param3, _param4, _param5)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueueDeclare(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueDeclare", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockAMQPChannel) QueueDelete(_param0 string, _param1 bool, _param2 bool, _param3 bool) (int, error) {
	ret := _m.ctrl.Call(_m, "QueueDelete", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueueDelete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueDelete", arg0, arg1, arg2, arg3)
}

func (_m *MockAMQPChannel) QueueInspect(_param0 string) (amqp.Queue, error) {
	ret := _m.ctrl.Call(_m, "QueueInspect", _param0)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueueInspect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueInspect", arg0)
}

func (_m *MockAMQPChannel) QueuePurge(_param0 string, _param1 bool) (int, error) {
	ret := _m.ctrl.Call(_m, "QueuePurge", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueuePurge(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueuePurge", arg0, arg1)
}

func (_m *MockAMQPChannel) QueueUnbind(_param0 string, _param1 string, _param2 string, _param3 amqp.Table) error {
	ret := _m.ctrl.Call(_m, "QueueUnbind", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) QueueUnbind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueUnbind", arg0, arg1, arg2, arg3)
}

func (_m *MockAMQPChannel) Recover(_param0 bool) error {
	ret := _m.ctrl.Call(_m, "Recover", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Recover(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Recover", arg0)
}

func (_m *MockAMQPChannel) Tx() error {
	ret := _m.ctrl.Call(_m, "Tx")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Tx() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Tx")
}

func (_m *MockAMQPChannel) TxCommit() error {
	ret := _m.ctrl.Call(_m, "TxCommit")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) TxCommit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TxCommit")
}

func (_m *MockAMQPChannel) TxRollback() error {
	ret := _m.ctrl.Call(_m, "TxRollback")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) TxRollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TxRollback")
}

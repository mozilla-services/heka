// Automatically generated by MockGen. DO NOT EDIT!
// Source: net (interfaces: Error)

package testsupport

import (
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of Error interface
type MockError struct {
	ctrl     *gomock.Controller
	recorder *_MockErrorRecorder
}

// Recorder for MockError (not exported)
type _MockErrorRecorder struct {
	mock *MockError
}

func NewMockError(ctrl *gomock.Controller) *MockError {
	mock := &MockError{ctrl: ctrl}
	mock.recorder = &_MockErrorRecorder{mock}
	return mock
}

func (_m *MockError) EXPECT() *_MockErrorRecorder {
	return _m.recorder
}

func (_m *MockError) Error() string {
	ret := _m.ctrl.Call(_m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockErrorRecorder) Error() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Error")
}

func (_m *MockError) Temporary() bool {
	ret := _m.ctrl.Call(_m, "Temporary")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockErrorRecorder) Temporary() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Temporary")
}

func (_m *MockError) Timeout() bool {
	ret := _m.ctrl.Call(_m, "Timeout")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockErrorRecorder) Timeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Timeout")
}
